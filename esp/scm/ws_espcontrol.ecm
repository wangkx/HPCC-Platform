/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2015 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

EspInclude(common);

ESPrequest [nil_remove] SetLoggingRequest
{
    int LoggingLevel;
    bool LogRequests;
    bool LogResponses;
};

ESPresponse [exceptions_inline, nil_remove, http_encode(0)] SetLoggingResponse
{
    int Status;
    string Message;
};

ESPenum SessionState : string
{
    New("New"),
    Active("Active"),
    InTimeout("Timeout"),
};

ESPStruct [nil_remove] Session
{
    string AuthDomain;
    string SessionID;
    string UserID;
    string NetworkAddress;
    string State;
    string CreateTime;
    string LastAccessed;
    int    TimeoutMinutes;
};

ESPrequest [nil_remove] SessionQueryRequest
{
    string AuthDomain;
    string FromIP;
    ESPenum SessionState State;
};

ESPresponse [exceptions_inline, nil_remove, http_encode(0)] SessionQueryResponse
{
    ESParray<ESPstruct Session> Sessions;
};

ESPrequest [nil_remove] SessionInfoRequest
{
    string AuthDomain;
    string SessionID;
};

ESPresponse [exceptions_inline, nil_remove, http_encode(0)] SessionInfoResponse
{
    ESPstruct Session Session;
};

ESPrequest [nil_remove] CleanSessionRequest
{
    string AuthDomain;
    string SessionID;
    string FromIP;
};

ESPresponse [exceptions_inline, nil_remove, http_encode(0)] CleanSessionResponse
{
    int Status;
    string Message;
};

ESPrequest [nil_remove] SetSessionTimeoutRequest
{
    string AuthDomain;
    string SessionID;
    string FromIP;
    int    TimeoutMinutes;
};

ESPresponse [exceptions_inline, nil_remove, http_encode(0)] SetSessionTimeoutResponse
{
    int Status;
    string Message;
};

ESPservice [auth_feature("NONE"), version("1.01"), default_client_version("1.01"), exceptions_inline("./smc_xslt/exceptions.xslt")] WSESPControl
{
    ESPmethod SetLogging(SetLoggingRequest, SetLoggingResponse);
    ESPmethod [min_ver("1.01")] SessionQuery(SessionQueryRequest, SessionQueryResponse);
    ESPmethod [min_ver("1.01")] SessionInfo(SessionInfoRequest, SessionInfoResponse);
    ESPmethod [min_ver("1.01")] CleanSession(CleanSessionRequest, CleanSessionResponse);
    ESPmethod [min_ver("1.01")] SetSessionTimeout(SetSessionTimeoutRequest, SetSessionTimeoutResponse);
};

SCMexportdef(WSESPControl);
SCMapi(WSESPControl) IClientWSESPControl *createWSESPControlClient();